{"version":3,"sources":["Nav.js","axios.js","Requests.js","Banner.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/counter/userSlice.js","data/data.js","screens/PlansScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchNetflixOriginals","fetchNowPlaying","fetchTrending","fetchTopRated","fetchPopular","fetchUpcoming","fetchActionMovies","fetchComedyMovies","fetchRomanceMovies","fetchHorrorMovies","fetchDocumentaries","Banner","str","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","style","backgroundSize","backgroundRepeat","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","poster_path","id","videoId","opts","height","width","playVars","autoplay","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","status","reducers","login","state","action","payload","logout","actions","selectUser","packagePlans","subscription","quality","PlansScreen","plan","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.849f0f45.chunk.js","sourcesContent":["import React, { useState, useEffect }from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n        const [show, handleShow] = useState(false);\r\n        const history = useHistory();\r\n\r\n        const transitionNavBar = () => {\r\n            if (window.scrollY > 100) {\r\n              handleShow(true);\r\n            } else {\r\n              handleShow(false);\r\n            }\r\n        };\r\n\r\n        useEffect(() => {\r\n            window.addEventListener(\"scroll\", transitionNavBar);\r\n            return () => window.removeEventListener(\"scroll\", transitionNavBar);\r\n        }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && 'nav__black'}`}>\r\n            <div className=\"nav__contents\">\r\n                <img \r\n                    onClick = {() => history.push('/')}\r\n                    className=\"nav__logo\"\r\n                    src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n                    alt=\"\"\r\n                />\r\n                <img \r\n                    onClick = {() => history.push('/profile')}\r\n                    className=\"nav__avatar\"\r\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n                    alt=\"\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n  });\r\n  \r\n  export default instance;","const API_KEY = \"31a7f7de7a8b000bff4995a9767438f3\";\r\n\r\nconst requests = {\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&language=en-US`,\r\n  fetchNowPlaying: `/now_playing/movie/day?api_key=${API_KEY}`,\r\n  fetchTrending: `/trending/movie/day?api_key=${API_KEY}`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchPopular: `/movie/popular?api_key=${API_KEY}&language=en-US`,\r\n  fetchUpcoming: `/movie/upcoming?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from 'react';\r\nimport './Banner.css';\r\nimport axios from \"./axios\";\r\nimport requests from \"./Requests\";\r\n\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState();\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n        const request = await axios.get(requests.fetchNetflixOriginals);\r\n        setMovie(\r\n            request.data.results[\r\n            Math.floor(Math.random() * request.data.results.length - 1)\r\n            ]\r\n        );\r\n        return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n    }\r\n    \r\n\r\n    return (\r\n        <header\r\n            className=\"banner\"\r\n            style={{\r\n                backgroundSize: 'cover',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundImage: `url('https://image.tmdb.org/t/p/original${movie?.backdrop_path}')`,\r\n                backgroundPosition: 'center center',\r\n            }}\r\n        >\r\n             <div className='banner__contents'>\r\n                <h1 className=\"banner__title\">\r\n                {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n\r\n                <h1 className=\"banner__description\">{truncate(movie?.overview, 200)}</h1>\r\n             </div>\r\n\r\n\r\n             <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, {useState, useEffect } from 'react';\r\nimport axios from \"./axios\";\r\nimport './Row.css';\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nfunction Row({ title,fetchUrl, isLargeRow }) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const base_url = \"https://image.tmdb.org/t/p/original\";\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n          const request = await axios.get(fetchUrl);\r\n          setMovies(request.data.results);\r\n          return request;\r\n        }\r\n        fetchData();\r\n      }, [fetchUrl]);\r\n\r\n\r\n      const opts = {\r\n          height: \"390\",\r\n          width: \"100%\",\r\n          playVars: {\r\n            autoplay: 1,\r\n          },\r\n      };\r\n\r\n      const handleClick = (movie) => {\r\n          if (trailerUrl) {\r\n              setTrailerUrl('');\r\n          }else {\r\n              movieTrailer(movie?.name || \"\")\r\n              .then((url) => {\r\n                  const urlParams = new URLSearchParams(new URL(url).search);\r\n                  setTrailerUrl(urlParams.get('v'));\r\n\r\n              })\r\n              .catch((error) => console.log(error));\r\n          }\r\n          }\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n\r\n            <div className=\"row__posters\">\r\n                {movies.map(\r\n                    (movie) => (\r\n                    <img\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        onClick = {() => handleClick(movie)}\r\n                        src={`${base_url}${\r\n                        isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                        }`}\r\n                        alt={movie.name}\r\n                        alt={movie.name}\r\n                        key={movie.id}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react';\r\nimport \"./HomeScreen.css\";\r\nimport Nav from  \"../Nav\";\r\nimport Banner from \"../Banner\";\r\nimport requests from '../Requests';\r\nimport Row from '../Row';\r\n\r\nfunction HomeScreen() {\r\n    return (\r\n        <div className=\"homeScreen\">\r\n            <Nav />\r\n            <Banner />\r\n            <Row\r\n                title='Netflix Originals'\r\n                fetchUrl={requests.fetchNetflixOriginals}\r\n                isLargeRow\r\n            />\r\n            <Row title='Trending' fetchUrl={requests.fetchTrending} />\r\n            <Row title='Popular' fetchUrl={requests.fetchPopular} />\r\n            <Row title='Top Rated' fetchUrl={requests.fetchTopRated} />\r\n            <Row title='Upcoming' fetchUrl={requests.fetchUpcoming} />\r\n            <Row title='Action' fetchUrl={requests.fetchActionMovies} />\r\n            <Row title='Comedy' fetchUrl={requests.fetchComedyMovies} />\r\n            <Row title='Horror' fetchUrl={requests.fetchHorrorMovies} />\r\n            <Row title='Romance' fetchUrl={requests.fetchRomanceMovies} />\r\n            <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDfSEjpUXJergDiG4yr3Wk1W5gkfGF1r_o\",\r\n    authDomain: \"netflix-clone-e0159.firebaseapp.com\",\r\n    projectId: \"netflix-clone-e0159\",\r\n    storageBucket: \"netflix-clone-e0159.appspot.com\",\r\n    messagingSenderId: \"379088146326\",\r\n    appId: \"1:379088146326:web:b003ae20837a1962e5d7b7\",\r\n    measurementId: \"G-CV262HPLVK\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n\r\n  export { auth };\r\n  export default db;","import React, { useRef } from 'react';\r\nimport { auth } from '../firebase';\r\nimport './SignupScreen.css';\r\n\r\nfunction SignupScreen() {\r\n\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n\r\n\r\n    const register = (e) => {\r\n        e.preventDefault();\r\n    \r\n        auth\r\n          .createUserWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n          )\r\n          .then((authUser) => {\r\n             console.log(authUser);\r\n          })\r\n          .catch((error) => {\r\n            alert(error.message);\r\n          });\r\n      };\r\n\r\n      const signIn = (e) => {\r\n        e.preventDefault();\r\n    \r\n        auth\r\n          .signInWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n          )\r\n          .then((authUser) => {\r\n             console.log(authUser);\r\n          })\r\n          .catch((error) => {\r\n            alert(error.message);\r\n          });\r\n      };\r\n    \r\n\r\n    return (\r\n        <div className=\"signupScreen\">\r\n            <form>\r\n                <h1>Sign In</h1>\r\n                <input ref={emailRef} placeholder=\"Email\" type=\"email\" />\r\n                <input ref={passwordRef} placeholder=\"Password\" type=\"password\" />\r\n                <button type=\"submit\" onClick={signIn}>Sign In</button>\r\n\r\n                <h4>\r\n                    <span className=\"signupScreen__gray\">New to Netflix? </span> \r\n                    <span className=\"signupScreen__link\" onClick={register}>Sign Up now.</span>\r\n                </h4>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignupScreen;\r\n","import React, { useState }  from 'react';\r\nimport \"./LoginScreen.css\";\r\nimport SignupScreen from './SignupScreen';\r\n\r\n\r\nfunction LoginScreen() {\r\n    const [signIn, setSignIn] = useState(false);\r\n\r\n    return (\r\n        <div className=\"loginScreen\">\r\n            <div className=\"loginBackground\">\r\n                <img\r\n                className=\"loginScreen__logo\"\r\n                src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n                alt=\"\"\r\n                />\r\n\r\n                <button onClick={() => setSignIn(true)} className=\"loginScreen__button\">\r\n                    SignIn\r\n                </button>\r\n\r\n                <div className=\"loginScreen__gradient\"/>\r\n                </div>\r\n\r\n                <div className=\"loginScreen__body\">\r\n                    {signIn ? (\r\n                        <SignupScreen />\r\n                    ) : (\r\n                        <>\r\n                        <h1>\r\n                            watch unlimited series , movies and \r\n                            more.\r\n                        </h1>\r\n                        <h2>Watch it anywhere. Unsubscribe at any time</h2>\r\n                        <h3>\r\n                        Ready to watch? Enter your email to create or restart your\r\n                        membership.\r\n                        </h3>\r\n                        <div className=\"loginScreen__input\">\r\n                            <form>\r\n                                <input type=\"email\"\r\n                                placeholder = \"Email Address\"\r\n                                />\r\n                                <button onClick={() => setSignIn(true)} className=\"loginScreen__getStarted\">GET STARTED</button>\r\n                            </form>\r\n                        </div>\r\n                    </>\r\n                    )}\r\n\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  user: null,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state,action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  \n});\n\nexport const { login , logout } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = (state) => state.user.user;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\n\nexport default userSlice.reducer;\n","export const packagePlans = [\r\n    { id: 1, subscription: 'Premium', quality: '4k + HDR' },\r\n    { id: 2, subscription: 'Basic', quality: '720p' },\r\n    { id: 3, subscription: 'Standard', quality: '1080p' },\r\n  ];\r\n  ","import React from 'react';\r\nimport './PlansScreen.css';\r\nimport { packagePlans } from '../data/data';\r\n\r\nconst PlansScreen = () => {\r\n  return (\r\n    <div className='plansScreen'>\r\n      {packagePlans.map((plan) => {\r\n        const { id, subscription, quality } = plan;\r\n        return (\r\n          <div className='plansScreen_plan'>\r\n            <div className='plansScreen_info'>\r\n              <h5>{subscription}</h5>\r\n              <h6>{quality}</h6>\r\n            </div>\r\n            <button>Subscribe</button>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlansScreen;\r\n","import React from 'react'\r\nimport \"./ProfileScreen.css\";\r\nimport Nav from '../Nav';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/counter/userSlice';\r\nimport { auth } from '../firebase';\r\nimport PlansScreen from './PlansScreen';\r\n\r\nfunction ProfileScreen() {\r\n\r\n    const user = useSelector(selectUser);\r\n    return (\r\n        <div className=\"profileScreen\">\r\n            <Nav />\r\n            <div className=\"profileScreen__body\">\r\n                <h1>Edit Profile</h1>\r\n                <div className=\"profileScreen__info\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"\" />\r\n                    <div className=\"profileScreen__details\">\r\n                        <h2>{user.email}</h2>\r\n                        <div className=\"profileScreen__plans\">\r\n                            <p></p>\r\n                            <h3>Plans</h3>\r\n                            <PlansScreen />\r\n                            <button \r\n                            onClick = {() => auth.signOut()}\r\n                            className=\"profileScreen__signOut\">\r\n                                Sign Out\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","import React,{ useEffect } from 'react';\nimport './App.css';\nimport HomeScreen from \"./screens/HomeScreen\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport { auth } from './firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, logout, selectUser } from './features/counter/userSlice';\nimport ProfileScreen from './screens/ProfileScreen';\n\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      if (userAuth) {\n        dispatch(\n          login({\n            uid: userAuth.uid,\n            email: userAuth.email,\n          })\n        );\n      } else {\n        dispatch(logout());\n      }\n    });\n    return unsubscribe;\n  }, [dispatch]);\n\n\n  \n\n  return (\n    <div className=\"app\">\n       <Router>\n          {!user ? (\n              <LoginScreen />\n            ) : (\n              <Switch>\n                <Route path='/profile'>\n                  <ProfileScreen />\n                </Route>\n                <Route exact path=\"/\">\n                  <HomeScreen />\n                </Route>\n              </Switch>\n          )}\n       </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/counter/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}